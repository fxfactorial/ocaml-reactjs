(* open Ast_mapper *)
(* open Ast_helper *)
(* open Asttypes *)
(* open Parsetree *)
(* open Longident *)

(* open Reactjs_high_level *)

(* let getenv s = try Sys.getenv s with Not_found -> "" *)

(* let getenv_mapper argv = *)
(*   (\* Our getenv_mapper only overrides the handling of expressions in the default mapper. *\) *)
(*   { default_mapper with *)
(*     expr = fun mapper expr -> *)
(*       match expr with *)
(*       (\* Is this an extension node? *\) *)
(*       | { pexp_desc = *)
(*             (\* Should have name "getenv". *\) *)
(*             Pexp_extension ({ txt = "elem"; loc }, pstr)} -> *)
(*         begin match pstr with *)
(*           | (\* Should have a single structure item, which is evaluation of a constant string. *\) *)
(*             PStr [{ pstr_desc = *)
(*                     Pstr_eval ({ pexp_loc  = loc; *)
(*                                  pexp_desc = Pexp_constant (Parsetree.con (sym, None))}, _)}] -> *)
(*             (\* Replace with a constant string with the value from the environment. *\) *)
(*             Exp.constant ~loc (Pconst_string (getenv sym, None)) *)
(*           | _ -> *)
(*             raise (Location.Error ( *)
(*                 Location.error ~loc "[%getenv] accepts a string, e.g. [%getenv \"USER\"]")) *)
(*         end *)
(*       (\* Delegate to the default mapper. *\) *)
(*       | x -> default_mapper.expr mapper x; *)
(*   } *)

(* let () = register "elem" getenv_mapper *)
