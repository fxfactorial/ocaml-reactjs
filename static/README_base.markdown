ReactJS bindings in OCaml
=========================

These are my bindings to ReactJS, by my count this is the global sixth
attempt at binding to React and my own second attempt, its kind of
hard.

Installation
============

Right now you can install with:

```shell
$ opam install reactjs
```

To get the development version, do:

```shell
$ opam pin add -y reactjs https://github.com/fxfactorial/ocaml-reactjs
```

The bindings should work on `node` or in the browser, both will assume
that `React`, and `ReactDOM` exist (on node they will do the
appropriate `require`, node side will also try to load the npm package
`react-dom`)

Documentation
=============

See this blog [post](http://hyegar.com/2016/07/17/js-of-ocaml-usage/)
to get a better understanding of OCaml typing of JavaScript objects
and such, (explains the `##` syntax extension).

The `mli` is commented and the doc strings should come up for you with
`merlin`. I also recommend using `ocp-browser`, this is a program that
is installed via `opam install ocp-index` and it gives you a nice high
level way to see the API: 

![img](./static/reactjs_ocp_browser.gif)

You can also do: `make doc` in the repo, that will create a directory
called `api.docdir` and in there you open the `index.html` for pretty
generated documentation.

If you're okay with doing: `brew cask install wkhtmltopdf`, then you
can get a PDF generated from the OCaml documentation. do 

```shell
$ make generate_pdf
```

And then the `reactjs_bindings.pdf` will be built in the root of the
directory. It should look like:

![img](./static/reactjs_doc_pdf.gif)

Contributing
============

Contributions of any kind are appreciated. If you're updating this
readme, then be update `static/README_base.markdown` and then run
`make readme`. 

For the source code itself, be aware that it uses some more advanced
features of the type system and can be mental pain. I haven't exposed
everything of `React` yet, and the library can still be made more
strongly typed. 

Right now a `JSX` like ppx is needed since writing out the `Text`,
`Elem` variants can be more strain on the brain and `JSX` lets you see
the structure of the element you're making more easily.

Before opening a PR, be sure to test all the existing examples. You
can build them all at once from the `reactjs_based_examples` directory
with `make all_examples`, or `make -C reactjs_based_examples
all_examples` from the root directory.

More examples added are always appreciated and you can do it by:

```shell
$ cd reactjs_based_examples
$ cp -R basic your_new_example
```

and add your example's directory name to the `Makefile`'s `dirs`
variable in the root of the project, 

around line 40s, `dirs := basic basic-click-counter quadratic`.

Examples
========

These examples should be familiar and are autogenerated into this
README from under the `reactjs_based_examples` dir.

Check the wiki for common FAQs, compile any example with:

```shell
$ ocamlfind ocamlc -package reactjs -linkpkg code.ml
$ js_of_ocaml a.out -o code.js
```

Also see
[ocaml-mailing-list](https://github.com/fxfactorial/ocaml-mailing-list)
for more example source code, include how to render on the server with
`nodejs`.


[//]: # "Do not write anything below here, the code examples will be appended"
